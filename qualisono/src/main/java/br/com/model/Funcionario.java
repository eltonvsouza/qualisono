package br.com.model;

// Generated 08/03/2012 15:36:20 by Hibernate Tools 3.2.4.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.Past;

import org.hibernate.annotations.LazyToOne;
import org.hibernate.annotations.LazyToOneOption;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotEmpty;
import org.springframework.context.annotation.Lazy;

/**
 * Funcionario generated by hbm2java
 */
@Entity
@Table(name = "funcionario", catalog = "qualisono")
public class Funcionario implements java.io.Serializable {

	private Integer codigo;
	private TipoFuncionario tipofuncionario;
	private Unidade unidade;
	private String tipo;
	private String cpfcnpj;
	private String inscestadual;
	private String rg;
	private Date dataexpedRg;
	private String nome;
	private Date datacadastro;
	private String razaosocial;
	private String cep;
	private Integer uf;
	private String cidade;
	private String bairro;
	private String logradouro;
	private String pais;
	private Integer numero;
	private String complemento;
	private String pontoref;
	private String telefone;
	private String telefone2;
	private String contato;
	private Date datanascimento;
	private String email;
	private boolean ativo;
	private Set<Venda> vendasForPdistribuidor = new HashSet<Venda>(0);
	private Set<Venda> vendasForMonitor = new HashSet<Venda>(0);

	public Funcionario() {
	}

	public Funcionario(TipoFuncionario tipofuncionario, Unidade unidade,
			String tipo, String cpfcnpj, String nome, boolean ativo) {
		this.tipofuncionario = tipofuncionario;
		this.unidade = unidade;
		this.tipo = tipo;
		this.cpfcnpj = cpfcnpj;
		this.nome = nome;
		this.ativo = ativo;
	}

	public Funcionario(TipoFuncionario tipofuncionario, Unidade unidade,
			String tipo, String cpfcnpj, String inscestadual, String rg,
			Date dataexpedRg, String nome, Date datacadastro,
			String razaosocial, String cep, Integer uf, String cidade,
			String bairro, String logradouro, String pais, Integer numero,
			String complemento, String pontoref, String telefone,
			String telefone2, String contato, Date datanascimento,
			String email, boolean ativo, Set<Venda> vendasForPdistribuidor,
			Set<Venda> vendasForMonitor) {
		this.tipofuncionario = tipofuncionario;
		this.unidade = unidade;
		this.tipo = tipo;
		this.cpfcnpj = cpfcnpj;
		this.inscestadual = inscestadual;
		this.rg = rg;
		this.dataexpedRg = dataexpedRg;
		this.nome = nome;
		this.datacadastro = datacadastro;
		this.razaosocial = razaosocial;
		this.cep = cep;
		this.uf = uf;
		this.cidade = cidade;
		this.bairro = bairro;
		this.logradouro = logradouro;
		this.pais = pais;
		this.numero = numero;
		this.complemento = complemento;
		this.pontoref = pontoref;
		this.telefone = telefone;
		this.telefone2 = telefone2;
		this.contato = contato;
		this.datanascimento = datanascimento;
		this.email = email;
		this.ativo = ativo;
		this.vendasForPdistribuidor = vendasForPdistribuidor;
		this.vendasForMonitor = vendasForMonitor;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "codigo", unique = true, nullable = false)
	public Integer getCodigo() {
		return this.codigo;
	}

	public void setCodigo(Integer codigo) {
		this.codigo = codigo;
	}

	@LazyToOne(LazyToOneOption.FALSE)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "tipofuncionario", nullable = false)
	public TipoFuncionario getTipofuncionario() {
		return this.tipofuncionario;
	}

	public void setTipofuncionario(TipoFuncionario tipofuncionario) {
		this.tipofuncionario = tipofuncionario;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "unidade", nullable = false)
	public Unidade getUnidade() {
		return this.unidade;
	}

	public void setUnidade(Unidade unidade) {
		this.unidade = unidade;
	}
	
	@NotEmpty(message="Campo Tipo: Obrigatório")
	@Column(name = "tipo", nullable = false, length = 4)
	public String getTipo() {
		return this.tipo;
	}

	public void setTipo(String tipo) {
		this.tipo = tipo;
	}

	@NotEmpty(message="Campo CPF/CNPJ: Obrigatório")
	@Column(name = "cpfcnpj", nullable = false, length = 18)
	public String getCpfcnpj() {
		return this.cpfcnpj;
	}

	public void setCpfcnpj(String cpfcnpj) {
		this.cpfcnpj = cpfcnpj;
	}

	@Column(name = "inscestadual", length = 18)
	public String getInscestadual() {
		return this.inscestadual;
	}

	public void setInscestadual(String inscestadual) {
		this.inscestadual = inscestadual;
	}

	@Column(name = "rg", length = 10)
	public String getRg() {
		return this.rg;
	}

	public void setRg(String rg) {
		this.rg = rg;
	}

	@Past(message="Campo Data de Expedição: Impossível cadastrar datas futuras")
	@Temporal(TemporalType.DATE)
	@Column(name = "dataexpedRg", length = 10)
	public Date getDataexpedRg() {
		return this.dataexpedRg;
	}

	public void setDataexpedRg(Date dataexpedRg) {
		this.dataexpedRg = dataexpedRg;
	}

	@NotEmpty(message="Campo Nome: Obrigatório")
	@Length(min=3, max=200, message="Campo Nome: Tamanho mínimo de 3 caracteres")
	@Column(name = "nome", nullable = false, length = 200)
	public String getNome() {
		return this.nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "datacadastro", length = 10)
	public Date getDatacadastro() {
		return this.datacadastro;
	}

	public void setDatacadastro(Date datacadastro) {
		this.datacadastro = datacadastro;
	}

	@Column(name = "razaosocial", length = 200)
	public String getRazaosocial() {
		return this.razaosocial;
	}

	public void setRazaosocial(String razaosocial) {
		this.razaosocial = razaosocial;
	}

	@Column(name = "cep", length = 11)
	public String getCep() {
		return this.cep;
	}

	public void setCep(String cep) {
		this.cep = cep;
	}

	@Column(name = "uf")
	public Integer getUf() {
		return this.uf;
	}

	public void setUf(Integer uf) {
		this.uf = uf;
	}

	@Column(name = "cidade", length = 100)
	public String getCidade() {
		return this.cidade;
	}

	public void setCidade(String cidade) {
		this.cidade = cidade;
	}

	@Column(name = "bairro", length = 100)
	public String getBairro() {
		return this.bairro;
	}

	public void setBairro(String bairro) {
		this.bairro = bairro;
	}

	@Column(name = "logradouro", length = 100)
	public String getLogradouro() {
		return this.logradouro;
	}

	public void setLogradouro(String logradouro) {
		this.logradouro = logradouro;
	}

	@Column(name = "pais", length = 50)
	public String getPais() {
		return this.pais;
	}

	public void setPais(String pais) {
		this.pais = pais;
	}

	@Column(name = "numero")
	public Integer getNumero() {
		return this.numero;
	}

	public void setNumero(Integer numero) {
		this.numero = numero;
	}

	@Column(name = "complemento", length = 100)
	public String getComplemento() {
		return this.complemento;
	}

	public void setComplemento(String complemento) {
		this.complemento = complemento;
	}

	@Column(name = "pontoref", length = 200)
	public String getPontoref() {
		return this.pontoref;
	}

	public void setPontoref(String pontoref) {
		this.pontoref = pontoref;
	}

	@Column(name = "telefone", length = 13)
	public String getTelefone() {
		return this.telefone;
	}

	public void setTelefone(String telefone) {
		this.telefone = telefone;
	}

	@Column(name = "telefone2", length = 13)
	public String getTelefone2() {
		return this.telefone2;
	}

	public void setTelefone2(String telefone2) {
		this.telefone2 = telefone2;
	}

	@Column(name = "contato", length = 50)
	public String getContato() {
		return this.contato;
	}

	public void setContato(String contato) {
		this.contato = contato;
	}

	@Past(message="Campo Data de Nascimento: Impossível cadastrar datas futuras")
	@Temporal(TemporalType.DATE)
	@Column(name = "datanascimento", length = 10)
	public Date getDatanascimento() {
		return this.datanascimento;
	}

	public void setDatanascimento(Date datanascimento) {
		this.datanascimento = datanascimento;
	}

	@Email(message="Campo E-Mail: Inválido")
	@Column(name = "email", length = 20)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "ativo", nullable = false)
	public boolean isAtivo() {
		return this.ativo;
	}

	public void setAtivo(boolean ativo) {
		this.ativo = ativo;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionarioByPdistribuidor")
	public Set<Venda> getVendasForPdistribuidor() {
		return this.vendasForPdistribuidor;
	}

	public void setVendasForPdistribuidor(Set<Venda> vendasForPdistribuidor) {
		this.vendasForPdistribuidor = vendasForPdistribuidor;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionarioByMonitor")
	public Set<Venda> getVendasForMonitor() {
		return this.vendasForMonitor;
	}

	public void setVendasForMonitor(Set<Venda> vendasForMonitor) {
		this.vendasForMonitor = vendasForMonitor;
	}

}
