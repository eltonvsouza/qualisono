package br.com.model;

// Generated 08/03/2012 15:36:20 by Hibernate Tools 3.2.4.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.CascadeType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.LazyToOne;
import org.hibernate.annotations.LazyToOneOption;

/**
 * Venda generated by hbm2java
 */
@Entity
@Table(name = "venda", catalog = "qualisono")
public class Venda implements java.io.Serializable {

	private Integer codigo;
	private Funcionario funcionarioByMonitor;
	private Cliente cliente;
	private Funcionario funcionarioByPdistribuidor;
	private Unidade unidade;
	private Date data;
	private String fpagamento;
	private Double valor;
	private Set<VendaItem> vendaitems = new HashSet<VendaItem>(0);

	public Venda() {
	}

	public Venda(Funcionario funcionarioByMonitor, Cliente cliente,
			Funcionario funcionarioByPdistribuidor, Unidade unidade,
			Date data, String fpagamento, Double valor) {
		this.funcionarioByMonitor = funcionarioByMonitor;
		this.cliente = cliente;
		this.funcionarioByPdistribuidor = funcionarioByPdistribuidor;
		this.unidade = unidade;
		this.data = data;
		this.fpagamento = fpagamento;
		this.valor = valor;
	}

	public Venda(Funcionario funcionarioByMonitor, Cliente cliente,
			Funcionario funcionarioByPdistribuidor, Unidade unidade, Date data,
			Set<VendaItem> vendaitems) {
		this.funcionarioByMonitor = funcionarioByMonitor;
		this.cliente = cliente;
		this.funcionarioByPdistribuidor = funcionarioByPdistribuidor;
		this.unidade = unidade;
		this.data = data;
		this.vendaitems = vendaitems;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "codigo", unique = true, nullable = false)
	public Integer getCodigo() {
		return this.codigo;
	}

	public void setCodigo(Integer codigo) {
		this.codigo = codigo;
	}

	@LazyToOne(LazyToOneOption.FALSE)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "monitor", nullable = false)
	public Funcionario getFuncionarioByMonitor() {
		return this.funcionarioByMonitor;
	}

	public void setFuncionarioByMonitor(Funcionario funcionarioByMonitor) {
		this.funcionarioByMonitor = funcionarioByMonitor;
	}

	@LazyToOne(LazyToOneOption.FALSE)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cliente", nullable = false)
	public Cliente getCliente() {
		return this.cliente;
	}

	public void setCliente(Cliente cliente) {
		this.cliente = cliente;
	}

	@LazyToOne(LazyToOneOption.FALSE)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pdistribuidor", nullable = false)
	public Funcionario getFuncionarioByPdistribuidor() {
		return this.funcionarioByPdistribuidor;
	}

	public void setFuncionarioByPdistribuidor(
			Funcionario funcionarioByPdistribuidor) {
		this.funcionarioByPdistribuidor = funcionarioByPdistribuidor;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "unidade", nullable = false)
	public Unidade getUnidade() {
		return this.unidade;
	}

	public void setUnidade(Unidade unidade) {
		this.unidade = unidade;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "data", nullable = false, length = 10)
	public Date getData() {
		return this.data;
	}

	public void setData(Date data) {
		this.data = data;
	}
	
	@Column(name = "fpagamento", nullable = false, length = 20)
	public String getFpagamento() {
		return this.fpagamento;
	}

	public void setFpagamento(String fpagamento) {
		this.fpagamento = fpagamento;
	}

	@Column(name = "valor", nullable = false)
	public Double getValor() {
		return valor;
	}

	public void setValor(Double valor) {
		this.valor = valor;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "venda", cascade = CascadeType.ALL)
	public Set<VendaItem> getVendaitems() {
		return this.vendaitems;
	}

	public void setVendaitems(Set<VendaItem> vendaitems) {
		this.vendaitems = vendaitems;
	}

}
